io = require "io"
os = require "os"

Project = {}
function Project.new(name, kind, includeOther, linkOther)
  local t = {
    name = name,
    kind = kind,
    includeOther = includeOther,
    linkOther = linkOther
  }
  return t
end

-- Workspace name
io.write("Enter the name of your workspace: ")
Workspace = io.read()

-- Ask to use defaults
io.write("Include default configurations and platforms? [y] ")
local order = { "Dbg", "Rls", "Win", "Lnx", "Mac" }
Options = {
  Dbg = {
    type = "config",
    use = true,
    name = "debug",
    macro = "DEBUG",
    runtime = "Debug",
    optimize = false
  },
  Rls = {
    type = "config",
    use = true,
    name = "release",
    macro = "RELEASE",
    runtime = "Release",
    optimize = true
  },
  Win = {
    type = "platform",
    use = true,
    name = "windows",
    macro = "WINDOWS",
    system = "windows"
  },
  Lnx = {
    type = "platform",
    use = true,
    name = "linux",
    macro = "LINUX",
    system = "linux"
  },
  Mac = {
    type = "platform",
    use = true,
    name = "mac",
    macro = "MAC",
    system = "macosx"
  }
}

-- Config
if io.read() ~= "y" then
  io.write("Use debug? [y] ")
  Options.Dbg.use = io.read() == "y" and true or false
  io.write("Use release? [y] ")
  Options.Rls.use = io.read() == "y" and true or false

  io.write("Support windows? [y] ")
  Options.Win.use = io.read() == "y" and true or false
  io.write("Support linux? [y] ")
  Options.Lnx.use = io.read() == "y" and true or false
  io.write("Support mac? [y] ")
  Options.Mac.use = io.read() == "y" and true or false
end

-- Language
while true do
  io.write("Language?\n[0] C\n[1] C++\n[2] D\n")
  local language = tonumber(io.read())

  if language == 0 then
    Language = "C"
    Extension = "c"
    Header = "h"
    break
  elseif language == 1 then
    Language = "C++"
    Extension = "cc"
    Header = "hh"
    break
  else
    io.write("Unrecognized Option. Please try again.\n")
  end
end

-- Compiler
while true do
  io.write("Compiler?\n[0] gcc\n[1] clang\n[2] mingw\n")

  local compiler = tonumber(io.read())

  if compiler == 0 then
    Compiler = "gcc"
    break
  elseif compiler == 1 then
    Compiler = "clang"
    break
  elseif compiler == 2 then
    Compiler = "mingw"
    break
  else
    io.write("Unrecognized Option. Please try again.\n")
  end
end

-- Project Loop
Projects = {}

function Projects:add(value)
  table.insert(self, value)
end

local count = 0
while true do
  io.write("\nAdd a new project? [y]\n")
  if io.read() ~= "y" then break end

  local name, kind, includeOther, linkOther

  io.write("Project name: ")
  name = io.read()

  while true do
    io.write("Kind?\n[0] Console app\n[1] Static library\n[2] Shared library\n[3] None\n")
    kind = tonumber(io.read())

    if kind == 0 then
      kind = "ConsoleApp"
      break
    elseif kind == 1 then
      kind = "StaticLib"
      break
    elseif kind == 2 then
      kind = "SharedLib"
      break
    elseif kind == 3 then
      kind = "None"
      break
    else
      io.write("Unrecognized Option. Please try again.\n")
    end
  end

  io.write("Include other projects? [y] ")
  includeOther = io.read() == "y" and true or false

  io.write("Link other projects? [y] ")
  linkOther = io.read() == "y" and true or false

  Projects:add(Project.new(name, kind, includeOther, linkOther))

  count = count + 1
end

if io.open("premake5.lua") then
  os.remove("premake5.lua")
end

Script = io.open("premake5.lua", "a")
Script:write("-- premake5 script generated by 2pake\n")
Script:write("workspace \"" .. Workspace .. "\"\n\n")

for _, key in ipairs(order) do
  local opt = Options[key]
  if opt.use then
    if opt.type == "config" then
      Script:write("configurations { \"" .. opt.name .. "\" }\n")
    else
      Script:write("platforms { \"" .. opt.name .. "\" }\n")
    end
  end
end

for _, key in ipairs(order) do
  local opt = Options[key]
  if opt.use then
    if opt.type == "config" then
      Script:write("\n\tfilter { \"configurations:" .. opt.name .. "\" }\n")
      Script:write("\t\tdefines { \"" .. opt.macro .. "\" }\n")
      Script:write("\t\truntime \"" .. opt.runtime .. "\"\n")
      if opt.optimize then
        Script:write("\t\toptimize \"On\"\n")
      end
    else
      Script:write("\n\tfilter { \"platforms:" .. opt.name .. "\" }\n")
      Script:write("\t\tdefines { \"" .. opt.macro .. "\" }\n")
      Script:write("\t\tsystem \"" .. opt.system .. "\"\n\n")
    end
  end
end

if io.open("Makefile") then
  os.remove("Makefile")
end

if count == 1 then
  os.execute("mkdir -p src 2>/dev/null")
  Script:write("project \"" .. Projects[1].name .. "\"\n")
  Script:write("\tlanguage \"" .. Language .. "\"\n")
  Script:write("\tkind \"" .. Projects[1].kind .. "\"\n")
  Script:write("\ttargetdir \"bin/%{cfg.buildcfg}_%{cfg.system}\"\n\n")
  Script:write("\tfiles { \"src/**." .. Extension .. "\", \"src/**." .. Header .. "\"}\n")
  Script:write("\nincludedirs\n{\n\t\"src\"\n}\n")
elseif count > 1 then
  for _, proj in ipairs(Projects) do
    os.execute("mkdir -p " .. proj.name .. " 2>/dev/null")
    Script:write("\ngroup \"" .. proj.name .. "\"\n")
    Script:write("\tinclude \"" .. proj.name .. "/premake5.lua\"\n")
    Script:write("group \"\"\n")

    if io.open(proj.name .. "/Makefile") then
      os.remove(proj.name .. "/Makefile")
    end

    if io.open(proj.name .. "/premake5.lua") then
      os.remove(proj.name .. "/premake5.lua")
    end

    os.execute("mkdir -p " .. proj.name .. "/src 2>/dev/null")
    local proj_script = io.open(proj.name .. "/premake5.lua", "a")
    proj_script:write("project \"" .. proj.name .. "\"\n")
    proj_script:write("\tlanguage \"" .. Language .. "\"\n")
    proj_script:write("\tkind \"" .. Projects[1].kind .. "\"\n")
    proj_script:write("\ttargetdir \"../bin/%{cfg.buildcfg}_%{cfg.system}/%{prj.name}\"\n\n")
    proj_script:write("\tfiles { \"src/**." .. Extension .. "\", \"src/**." .. Header .. "\"}\n")

    proj_script:write("\nincludedirs\n{\n\t\"src\"")

    if proj.includeOther then
      for _, lib in ipairs(Projects) do
        if lib.kind ~= "ConsoleApp" then
          proj_script:write(",\n\t\"../" .. lib.name .. "/src\"")
        end
      end
    end

    proj_script:write("\n}\n")

    if proj.includeOther then
      proj_script:write("\nlinks\n{")
      for _, lib in ipairs(Projects) do
        if lib.kind ~= "ConsoleApp" then
          proj_script:write("\n\t\"" .. lib.name .. "\",")
        end
      end
      proj_script:write("\n}\n")
    end
  end
end

os.execute("premake5 --cc=" .. Compiler .. " gmake2")
